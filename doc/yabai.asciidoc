:man source:   Yabai
:man version:  {revnumber}
:man manual:   Yabai Manual

ifdef::env-github[]
:toc:
:toc-title:
:toc-placement!:
:numbered:
endif::[]

yabai(1)
========

ifdef::env-github[]
toc::[]
endif::[]

Name
----

yabai

Synopsis
--------

*yabai* [*-v*,*--version*|*-V*,*--verbose*|*-m*,*--message* 'msg'|*-c*,*--config* 'config_file'|*--install-sa*|*--uninstall-sa*|*--check-sa*|*--load-sa*]

Description
-----------

*yabai* is a tiling window manager for macOS based on binary space partitioning.

Options
-------
*-v*, *--version*::
    Print the version and exit.

*-V*, *--verbose*::
    Output debug information to stdout.

*-m*, *--message* '<msg>'::
    Send message to a running instance of yabai.

*-c*, *--config* '<config_file>'::
    Use the specified configuration file.

*--install-sa*::
    Install scripting-addition. Must be run as root. +
    Path is /System/Library/ScriptingAdditions on macOS High Sierra, and /Library/ScriptingAdditions on Mojave and newer.

*--uninstall-sa*::
    Uninstall scripting-addition. Must be run as root. +
    Path is /System/Library/ScriptingAdditions on macOS High Sierra, and /Library/ScriptingAdditions on Mojave and newer.

*--check-sa*::
    Returns a zero exit-code if the latest version of the scripting-addition is installed.

*--load-sa*::
    Loads the scripting-addition into Dock.app.

Definitions
-----------

[subs=+macros]
----
REGEX       := https://www.gnu.org/software/findutils/manual/html_node/find_html/posix_002dextended-regular-expression-syntax.html[POSIX extended regular expression syntax]

LABEL       := arbitrary string/text used as an identifier

LAYER       := below | normal | above

BOOL_SEL    := on | off

FLOAT_SEL   := 0 < <value> <= 1.0

RULE_SEL    := <index> | LABEL

SIGNAL_SEL  := <index> | LABEL

DIR_SEL     := north | east | south | west

WINDOW_SEL  := prev | next | first | last | recent | mouse | largest | smallest | DIR_SEL | <window id>

DISPLAY_SEL := prev | next | first | last | recent | DIR_SEL | <arrangement index (1-based)>

SPACE_SEL   := prev | next | first | last | recent | <mission-control index (1-based)> | LABEL

----

Domains
-------

Config
~~~~~~

General Syntax
^^^^^^^^^^^^^^

yabai -m config <global setting>::
    Get or set the value of <global setting>.

yabai -m config [--space '<mission-control index>'] <space setting>::
    Get or set the value of <space setting>.

Global Settings
^^^^^^^^^^^^^^^

*debug_output* ['<BOOL_SEL>']::
    Enable output of debug information to stdout.

*external_bar* ['<main|all|off>:<top_padding>:<bottom_padding>']::
    Specify top and bottom padding for a potential custom bar that you may be running. +
    'main': Apply the given padding only to spaces located on the main display. +
    'all':  Apply the given padding to all spaces regardless of their display. +
    'off':  Do not apply any special padding.

*mouse_follows_focus* ['<BOOL_SEL>']::
    When focusing a window, put the mouse at its center.

*focus_follows_mouse* ['autofocus|autoraise|off']::
    Automatically focus the window under the mouse.

*window_placement* ['first_child|second_child']::
    Specify whether managed windows should become the first or second leaf-node.

*window_topmost* ['<BOOL_SEL>']::
    Make floating windows stay on top.

*window_shadow* ['<BOOL_SEL>|float']::
    Draw shadow for windows.

*window_opacity* ['<BOOL_SEL>']::
    Enable opacity for windows.

*window_opacity_duration* ['<floating point number>']::
    Duration of transition between active / normal opacity.

*active_window_opacity* ['<FLOAT_SEL>']::
    Opacity of the focused window.

*normal_window_opacity* ['<FLOAT_SEL>']::
    Opacity of an unfocused window.

*window_border* ['<BOOL_SEL>']::
    Draw border for windows.

*window_border_width* ['<even integer number>']::
    Width of window borders. If the given width is an odd number, it will be incremented by 1.

*active_window_border_color* ['0xAARRGGBB']::
    Color of the border of the focused window.

*normal_window_border_color* ['0xAARRGGBB']::
    Color of the border of an unfocused window.

*insert_feedback_color* ['0xAARRGGBB']::
    Color of the *window --insert* message selection.

*split_ratio* ['<FLOAT_SEL>']::
    Default split ratio.

*auto_balance* ['<BOOL_SEL>']::
    Balance the window tree upon change, so that all windows occupy the same area.

*mouse_modifier* ['cmd|alt|shift|ctrl|fn|super']::
    Keyboard modifier used for moving and resizing windows. +
    Additional modifiers can be specified by separating them with '+', for example 'cmd+alt+fn'. A shorthand for 'cmd+alt+shift+ctrl' is provided via 'super'.

*mouse_action1* ['move|move2|resize']::
    Action performed when pressing 'mouse_modifier' + 'button1'. +
    If the scripting-addition is not installed, move will not work. In this case, move2 may be used although it is less performant.

*mouse_action2* ['move|move2|resize']::
    Action performed when pressing 'mouse_modifier' + 'button2'. +
    If the scripting-addition is not installed, move will not work. In this case, move2 may be used although it is less performant.

Space Settings
^^^^^^^^^^^^^^

*layout* ['bsp|float']::
    Set the layout of the selected space.

*top_padding* ['<integer number>']::
    Padding added at the upper side of the selected space.

*bottom_padding* ['<integer number>']::
    Padding added at the lower side of the selected space.

*left_padding* ['<integer number>']::
    Padding added at the left side of the selected space.

*right_padding* ['<integer number>']::
    Padding added at the right side of the selected space.

*window_gap* ['<integer number>']::
    Size of the gap that separates windows for the selected space.

Display
~~~~~~~

General Syntax
^^^^^^^^^^^^^^

yabai -m display ['<DISPLAY_SEL'>] '<COMMAND>'

COMMAND
^^^^^^^

*--focus* '<DISPLAY_SEL>'::
    Focus the given display.

Space
~~~~~

General Syntax
^^^^^^^^^^^^^^

yabai -m space ['<SPACE_SEL>'] '<COMMAND>'

COMMAND
^^^^^^^

*--focus* '<SPACE_SEL>'::
    Focus the given space.

*--create*::
    Create a new space on the display of the selected space.

*--destroy*::
    Remove the selected space.

*--move* '<SPACE_SEL>'::
    Move position of the selected space to the position of the given space. +
    The selected space and given space must both belong to the same display.

*--swap* '<SPACE_SEL>'::
    Swap the selected space with the given space. +
    The selected space and given space must both belong to the same display.

*--display* '<DISPLAY_SEL>'::
    Send the selected space to the given display.

*--balance*::
    Adjust the split ratios of the selected space so that all windows occupy the same area.

*--mirror* 'x-axis|y-axis'::
    Flip the tree of the selected space.

*--rotate* '90|180|270'::
    Rotate the tree of the selected space.

*--padding* 'abs|rel:<top>:<bottom>:<left>:<right>'::
    Padding added at the sides of the selected space.

*--gap* 'abs|rel:<gap>'::
    Size of the gap that separates windows on the selected space.

*--toggle* 'padding|gap|mission-control|show-desktop'::
    Toggle space setting on or off for the selected space.

*--layout* 'bsp|float'::
    Set the layout of the selected space.

*--label* ['<LABEL>']::
    Label the selected space, allowing that label to be used as an alias in commands that take a `SPACE_SEL` parameter. +
    If the command is called without an argument it will try to remove a previously assigned label.

Window
~~~~~~

General Syntax
^^^^^^^^^^^^^^

yabai -m window ['<WINDOW_SEL>'] '<COMMAND>'

COMMAND
^^^^^^^

*--focus* '<WINDOW_SEL>'::
    Focus the given window.

*--swap* '<WINDOW_SEL>'::
    Swap position of the selected window and the given window.

*--warp* '<WINDOW_SEL>'::
    Re-insert the selected window, splitting the given window.

*--insert* '<DIR_SEL>'::
    Set the splitting area of the selected window. +
    If the current splitting area matches 'DIR_SEL', the action will be undone.

*--grid* '<rows>:<cols>:<start-x>:<start-y>:<width>:<height>'::
    Set the frame of the selected window based on a self-defined grid.

*--move* 'abs|rel:<dx>:<dy>'::
    If type is 'rel' the selected window is moved by 'dx' pixels horizontally and 'dy' pixels vertically, otherwise 'dx' and 'dy' will become its new position.

*--resize* 'top|left|bottom|right|top_left|top_right|bottom_right|bottom_left|abs:<dx>:<dy>'::
    Resize the selected window by moving the given handle 'dx' pixels horizontally and 'dy' pixels vertically. If handle is 'abs' the new size will be 'dx' width and 'dy' height.

*--ratio* 'rel|abs:<dr>'::
    If type is 'rel' the split ratio of the selected window is changed by 'dr', otherwise 'dr' will become the new split ratio. A positive/negative delta will increase/decrease the size of the left-child.

*--toggle* 'float|sticky|topmost|pip|shadow|border|split|zoom-parent|zoom-fullscreen|native-fullscreen|expose'::
    Toggle the given property of the selected window.

*--layer* '<LAYER>'::
    Set the stacking layer of the selected window.

*--opacity* '<floating point number>'::
    Set the opacity of the selected window. The window will no longer be eligible for automatic change in opacity upon focus change. +
    Specify the value '0.0' to reset back to full opacity OR have it be automatically managed through focus changes.

*--display* '<DISPLAY_SEL>'::
    Send the selected window to the given display.

*--space* '<SPACE_SEL>'::
    Send the selected window to the given space.

*--minimize*::
    Minimizes the selected window. Only works on windows that provide a minimize button in its titlebar.

*--deminimize*::
    Restores the selected window, if it is minimized. The window will only get focus if the owning application has focus. +
    Note that you can also '--focus' a minimized window to restore it as the focused window.

*--close*::
    Closes the selected window. Only works on windows that provide a close button in its titlebar.

Query
~~~~~~

General Syntax
^^^^^^^^^^^^^^

yabai -m query '<COMMAND>' ['<ARGUMENT>']

COMMAND
^^^^^^^

*--displays*::
    Retrieve information about displays.

*--spaces*::
    Retrieve information about spaces.

*--windows*::
    Retrieve information about windows.

ARGUMENT
^^^^^^^^

*--display* ['<DISPLAY_SEL>']::
    Constrain matches to the selected display.

*--space* ['<SPACE_SEL>']::
    Constrain matches to the selected space.

*--window* ['<WINDOW_SEL>']::
    Constrain matches to the selected window.

Rule
~~~~

All registered rules that match the given filter will apply to a window in the order they were added. +
If multiple rules specify a value for the same argument, the latter rule will override that value as it was applied last.

General Syntax
^^^^^^^^^^^^^^

yabai -m rule '<COMMAND>'

COMMAND
^^^^^^^

*--add ['<ARGUMENT>']*::
    Add a new rule.

*--remove '<RULE_SEL>'*::
    Remove an existing rule with the given index or label.

*--list*::
    Output list of registered rules.

ARGUMENT
^^^^^^^^

*label='<LABEL>'*::
    Label used to identify the rule with a unique name

*app[!]='<REGEX>'*::
    Name of application. If '!' is present, invert the match.

*title[!]='<REGEX>'*::
    Title of window. If '!' is present, invert the match.

*display='[^]<DISPLAY_SEL>'*::
    Send window to display. If '^' is present, follow focus.

*space='[^]<SPACE_SEL>'*::
    Send window to space. If '^' is present, follow focus.

*manage='<BOOL_SEL>'*::
    Window should be managed (tile vs float).

*sticky='<BOOL_SEL>'*::
    Window appears on all spaces.

*layer='<LAYER>'*::
    Window is ordered within the given stacking layer.

*opacity='<FLOAT_SEL>'*::
    Set window opacity. The window will no longer be eligible for automatic change in opacity upon focus change.

*border='<BOOL_SEL>'*::
    Window should draw border.

*native-fullscreen='<BOOL_SEL>'*::
    Window should enter native macOS fullscreen mode.

*grid='<rows>:<cols>:<start-x>:<start-y>:<width>:<height>'*::
    Set window frame based on a self-defined grid.

Signal
~~~~~~

A signal is a simple way for the user to react to some event that has been processed. +
Arguments are passed through environment variables.

General Syntax
^^^^^^^^^^^^^^

yabai -m signal '<COMMAND>'

COMMAND
^^^^^^^

*--add event='<EVENT>' action='<ACTION>' [label='<LABEL>'] [app[!]='<REGEX>'] [title[!]='<REGEX>']*::
    Add an optionally labelled signal to execute an action after processing an event of the given type. +
    Some signals can be specified to trigger based on the application name and/or window title.

*--remove '<SIGNAL_SEL>'*::
    Remove an existing signal with the given index or label.

*--list*::
    Output list of registered signals.

EVENT
^^^^^

*application_launched*::
    Triggered when a new application is launched. +
    Eligible for *app* filter. +
    Passes one argument: $YABAI_PROCESS_ID

*application_terminated*::
    Triggered when an application is terminated. +
    Eligible for *app* filter. +
    Passes one argument: $YABAI_PROCESS_ID

*application_front_switched*::
    Triggered when the front-most application changes. +
    Passes two arguments: $YABAI_PROCESS_ID, $YABAI_RECENT_PROCESS_ID

*application_activated*::
    Triggered when an application is activated. +
    Eligible for *app* filter. +
    Passes one argument: $YABAI_PROCESS_ID

*application_deactivated*::
    Triggered when an application is deactivated. +
    Eligible for *app* filter. +
    Passes one argument: $YABAI_PROCESS_ID

*application_visible*::
    Triggered when an application is unhidden. +
    Eligible for *app* filter. +
    Passes one argument: $YABAI_PROCESS_ID

*application_hidden*::
    Triggered when an application is hidden. +
    Eligible for *app* filter. +
    Passes one argument: $YABAI_PROCESS_ID

*window_created*::
    Triggered when a window is created. +
    Eligible for both *app* and *title* filter. +
    Passes one argument: $YABAI_WINDOW_ID

*window_destroyed*::
    Triggered when a window is destroyed. +
    Passes one argument: $YABAI_WINDOW_ID

*window_focused*::
    Triggered when a window becomes the key-window for its application. +
    Eligible for both *app* and *title* filter. +
    Passes one argument: $YABAI_WINDOW_ID

*window_moved*::
    Triggered when a window changes position. +
    Eligible for both *app* and *title* filter. +
    Passes one argument: $YABAI_WINDOW_ID

*window_resized*::
    Triggered when a window changes dimensions. +
    Eligible for both *app* and *title* filter. +
    Passes one argument: $YABAI_WINDOW_ID

*window_minimized*::
    Triggered when a window has been minimized. +
    Eligible for both *app* and *title* filter. +
    Passes one argument: $YABAI_WINDOW_ID

*window_deminimized*::
    Triggered when a window has been deminimized. +
    Eligible for both *app* and *title* filter. +
    Passes one argument: $YABAI_WINDOW_ID

*window_title_changed*::
    Triggered when a window changes its title. +
    Eligible for both *app* and *title* filter. +
    Passes one argument: $YABAI_WINDOW_ID

*space_changed*::
    Triggered when the active space has changed. +
    Passes two arguments: $YABAI_SPACE_ID, $YABAI_RECENT_SPACE_ID

*display_added*::
    Triggered when a new display has been added. +
    Passes one argument: $YABAI_DISPLAY_ID

*display_removed*::
    Triggered when a display has been removed. +
    Passes one argument: $YABAI_DISPLAY_ID

*display_moved*::
    Triggered when a change has been made to display arrangement. +
    Passes one argument: $YABAI_DISPLAY_ID

*display_resized*::
    Triggered when a display has changed resolution. +
    Passes one argument: $YABAI_DISPLAY_ID

*display_changed*::
    Triggered when the active display has changed. +
    Passes two arguments: $YABAI_DISPLAY_ID, $YABAI_RECENT_DISPLAY_ID

*mouse_down*::
    Triggered when a mouse button has been pressed. +
    Passes two arguments: $YABAI_BUTTON, $YABAI_POINT

*mouse_up*::
    Triggered when a mouse button has been released. +
    Passes two arguments: $YABAI_BUTTON, $YABAI_POINT

*mouse_dragged*::
    Triggered when the mouse is moved with one of its buttons pressed. +
    Passes two arguments: $YABAI_BUTTON, $YABAI_POINT

*mouse_moved*::
    Triggered when the mouse is moved. +
    Passes two arguments: $YABAI_BUTTON, $YABAI_POINT

*mission_control_enter*::
    Triggered when mission-control activates.

*mission_control_check_for_exit*::
    Triggered periodically while mission-control is active.

*mission_control_exit*::
    Triggered when mission-control deactivates.

*dock_did_restart*::
    Triggered when Dock.app restarts.

*menu_opened*::
    Triggered when a menu is opened.

*menu_bar_hidden_changed*::
    Triggered when the macOS menubar 'autohide' setting changes.

*dock_did_change_pref*::
    Triggered when the macOS Dock preferences changes.

*system_woke*::
    Triggered when macOS wakes from sleep.

*daemon_message*::
    Triggered when yabai receives a message on its socket.

ACTION
^^^^^^

Arbitrary command executed through */usr/bin/env sh -c*

Exit Codes
----------

If *yabai* can't handle a message, it will return a non-zero exit code.

Author
------

Åsmund Vikane <aasvi93 at gmail.com>
